{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\r\n * Get the current block number of the network\r\n * @param provider (TEthersProvider)\r\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\r\n * @returns (number) :: block number\r\n */\n\nexport const useBlockNumber = (provider, pollTime = 0) => {\n  const [blockNumber, setBlockNumber] = useState(0);\n  const getBlockNumber = useCallback(async () => {\n    const nextBlockNumber = await provider.getBlockNumber();\n\n    if (nextBlockNumber !== blockNumber) {\n      setBlockNumber(nextBlockNumber);\n    }\n  }, [blockNumber, provider]);\n  useOnRepetition(getBlockNumber, {\n    provider,\n    pollTime\n  });\n  return blockNumber;\n};","map":{"version":3,"sources":["C:/Users/Firebat/challenge-1-decentralized-staking/node_modules/eth-hooks/useBlockNumber.js"],"names":["useCallback","useState","useOnRepetition","useBlockNumber","provider","pollTime","blockNumber","setBlockNumber","getBlockNumber","nextBlockNumber"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,QAAQ,GAAG,CAAtB,KAA4B;AACtD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMO,cAAc,GAAGR,WAAW,CAAC,YAAY;AAC3C,UAAMS,eAAe,GAAG,MAAML,QAAQ,CAACI,cAAT,EAA9B;;AACA,QAAIC,eAAe,KAAKH,WAAxB,EAAqC;AACjCC,MAAAA,cAAc,CAACE,eAAD,CAAd;AACH;AACJ,GALiC,EAK/B,CAACH,WAAD,EAAcF,QAAd,CAL+B,CAAlC;AAMAF,EAAAA,eAAe,CAACM,cAAD,EAAiB;AAAEJ,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAjB,CAAf;AACA,SAAOC,WAAP;AACH,CAVM","sourcesContent":["import { useCallback, useState } from 'react';\r\nimport { useOnRepetition } from \"./useOnRepetition\";\r\n/**\r\n * Get the current block number of the network\r\n * @param provider (TEthersProvider)\r\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\r\n * @returns (number) :: block number\r\n */\r\nexport const useBlockNumber = (provider, pollTime = 0) => {\r\n    const [blockNumber, setBlockNumber] = useState(0);\r\n    const getBlockNumber = useCallback(async () => {\r\n        const nextBlockNumber = await provider.getBlockNumber();\r\n        if (nextBlockNumber !== blockNumber) {\r\n            setBlockNumber(nextBlockNumber);\r\n        }\r\n    }, [blockNumber, provider]);\r\n    useOnRepetition(getBlockNumber, { provider, pollTime });\r\n    return blockNumber;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}