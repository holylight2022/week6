{"ast":null,"code":"import { Token, WETH, Fetcher, Route } from '@uniswap/sdk';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"../..\";\n/**\r\n * Get the Exchange price of ETH/USD (extrapolated from WETH/DAI)\r\n * @param targetNetwork (TNetwork)\r\n * @param mainnetProvider (TEthersProvider)\r\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\r\n * @returns (number) :: price\r\n */\n\nexport const useExchangeEthPrice = (targetNetwork, mainnetProvider, pollTime = 0) => {\n  const [price, setPrice] = useState(0);\n  const pollPrice = useCallback(() => {\n    const getPrice = async () => {\n      if (!mainnetProvider) {\n        return;\n      } else if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const network = await mainnetProvider.getNetwork();\n        const DAI = new Token(network ? network.chainId : 1, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18);\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    };\n\n    void getPrice();\n  }, [targetNetwork.price, mainnetProvider]);\n  useOnRepetition(pollPrice, {\n    pollTime,\n    provider: mainnetProvider\n  });\n  return price;\n};","map":{"version":3,"sources":["C:/Users/Firebat/challenge-1-decentralized-staking/node_modules/eth-hooks/dapps/dex/useExchangeEthPrice.js"],"names":["Token","WETH","Fetcher","Route","useCallback","useState","useOnRepetition","useExchangeEthPrice","targetNetwork","mainnetProvider","pollTime","price","setPrice","pollPrice","getPrice","network","getNetwork","DAI","chainId","pair","fetchPairData","route","parseFloat","midPrice","toSignificant","provider"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,KAA/B,QAA4C,cAA5C;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,aAAD,EAAgBC,eAAhB,EAAiCC,QAAQ,GAAG,CAA5C,KAAkD;AACjF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAMQ,SAAS,GAAGT,WAAW,CAAC,MAAM;AAChC,UAAMU,QAAQ,GAAG,YAAY;AACzB,UAAI,CAACL,eAAL,EAAsB;AAClB;AACH,OAFD,MAGK,IAAID,aAAa,CAACG,KAAlB,EAAyB;AAC1BC,QAAAA,QAAQ,CAACJ,aAAa,CAACG,KAAf,CAAR;AACH,OAFI,MAGA;AACD,cAAMI,OAAO,GAAG,MAAMN,eAAe,CAACO,UAAhB,EAAtB;AACA,cAAMC,GAAG,GAAG,IAAIjB,KAAJ,CAAUe,OAAO,GAAGA,OAAO,CAACG,OAAX,GAAqB,CAAtC,EAAyC,4CAAzC,EAAuF,EAAvF,CAAZ;AACA,cAAMC,IAAI,GAAG,MAAMjB,OAAO,CAACkB,aAAR,CAAsBH,GAAtB,EAA2BhB,IAAI,CAACgB,GAAG,CAACC,OAAL,CAA/B,EAA8CT,eAA9C,CAAnB;AACA,cAAMY,KAAK,GAAG,IAAIlB,KAAJ,CAAU,CAACgB,IAAD,CAAV,EAAkBlB,IAAI,CAACgB,GAAG,CAACC,OAAL,CAAtB,CAAd;AACAN,QAAAA,QAAQ,CAACU,UAAU,CAACD,KAAK,CAACE,QAAN,CAAeC,aAAf,CAA6B,CAA7B,CAAD,CAAX,CAAR;AACH;AACJ,KAdD;;AAeA,SAAKV,QAAQ,EAAb;AACH,GAjB4B,EAiB1B,CAACN,aAAa,CAACG,KAAf,EAAsBF,eAAtB,CAjB0B,CAA7B;AAkBAH,EAAAA,eAAe,CAACO,SAAD,EAAY;AAAEH,IAAAA,QAAF;AAAYe,IAAAA,QAAQ,EAAEhB;AAAtB,GAAZ,CAAf;AACA,SAAOE,KAAP;AACH,CAtBM","sourcesContent":["import { Token, WETH, Fetcher, Route } from '@uniswap/sdk';\r\nimport { useCallback, useState } from 'react';\r\nimport { useOnRepetition } from \"../..\";\r\n/**\r\n * Get the Exchange price of ETH/USD (extrapolated from WETH/DAI)\r\n * @param targetNetwork (TNetwork)\r\n * @param mainnetProvider (TEthersProvider)\r\n * @param pollTime (number) :: if >0 use polling, else use instead of onBlock event\r\n * @returns (number) :: price\r\n */\r\nexport const useExchangeEthPrice = (targetNetwork, mainnetProvider, pollTime = 0) => {\r\n    const [price, setPrice] = useState(0);\r\n    const pollPrice = useCallback(() => {\r\n        const getPrice = async () => {\r\n            if (!mainnetProvider) {\r\n                return;\r\n            }\r\n            else if (targetNetwork.price) {\r\n                setPrice(targetNetwork.price);\r\n            }\r\n            else {\r\n                const network = await mainnetProvider.getNetwork();\r\n                const DAI = new Token(network ? network.chainId : 1, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18);\r\n                const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\r\n                const route = new Route([pair], WETH[DAI.chainId]);\r\n                setPrice(parseFloat(route.midPrice.toSignificant(6)));\r\n            }\r\n        };\r\n        void getPrice();\r\n    }, [targetNetwork.price, mainnetProvider]);\r\n    useOnRepetition(pollPrice, { pollTime, provider: mainnetProvider });\r\n    return price;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}