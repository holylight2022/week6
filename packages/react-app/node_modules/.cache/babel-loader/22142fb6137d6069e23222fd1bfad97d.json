{"ast":null,"code":"import { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\n/**\r\n * A hook that creates a buner address and returns a Signer\r\n * @param provider (TEthersProvider)\r\n * @returns (ethers.signer) :: signer of the wallet\r\n */\n\nexport const useBurnerSigner = provider => {\n  const key = 'metaPrivateKey';\n  const [signer, setSigner] = useState();\n  const [privateKeyValue, setPrivateKeyValue] = useState();\n\n  const setValue = value => {\n    try {\n      setPrivateKeyValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n\n    if (!storedKey) {\n      console.log('generating a new key');\n      const newWallet = ethers.Wallet.createRandom();\n      const newKey = newWallet.privateKey;\n      setValue(newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n  useEffect(() => {\n    if (privateKeyValue && provider) {\n      const wallet = new ethers.Wallet(privateKeyValue);\n      const newSigner = wallet.connect(provider);\n      setSigner(newSigner);\n    }\n  }, [privateKeyValue, provider]);\n  return signer;\n};","map":{"version":3,"sources":["C:/Users/Firebat/challenge-1-decentralized-staking/node_modules/eth-hooks/useBurnerSigner.js"],"names":["ethers","useState","useEffect","useBurnerSigner","provider","key","signer","setSigner","privateKeyValue","setPrivateKeyValue","setValue","value","window","localStorage","setItem","error","console","log","storedKey","getItem","newWallet","Wallet","createRandom","newKey","privateKey","wallet","newSigner","connect"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAIC,QAAD,IAAc;AACzC,QAAMC,GAAG,GAAG,gBAAZ;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,EAApC;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,EAAtD;;AACA,QAAMS,QAAQ,GAAIC,KAAD,IAAW;AACxB,QAAI;AACAF,MAAAA,kBAAkB,CAACE,KAAD,CAAlB;AACAC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BT,GAA5B,EAAiCM,KAAjC;AACH,KAHD,CAIA,OAAOI,KAAP,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GARD;;AASAb,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMgB,SAAS,GAAGN,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4Bd,GAA5B,CAAlB;;AACA,QAAI,CAACa,SAAL,EAAgB;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,YAAMG,SAAS,GAAGpB,MAAM,CAACqB,MAAP,CAAcC,YAAd,EAAlB;AACA,YAAMC,MAAM,GAAGH,SAAS,CAACI,UAAzB;AACAd,MAAAA,QAAQ,CAACa,MAAD,CAAR;AACH,KALD,MAMK;AACDb,MAAAA,QAAQ,CAACQ,SAAD,CAAR;AACH;AACJ,GAXQ,EAWN,EAXM,CAAT;AAYAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,eAAe,IAAIJ,QAAvB,EAAiC;AAC7B,YAAMqB,MAAM,GAAG,IAAIzB,MAAM,CAACqB,MAAX,CAAkBb,eAAlB,CAAf;AACA,YAAMkB,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAevB,QAAf,CAAlB;AACAG,MAAAA,SAAS,CAACmB,SAAD,CAAT;AACH;AACJ,GANQ,EAMN,CAAClB,eAAD,EAAkBJ,QAAlB,CANM,CAAT;AAOA,SAAOE,MAAP;AACH,CAjCM","sourcesContent":["import { ethers } from 'ethers';\r\nimport { useState, useEffect } from 'react';\r\n/**\r\n * A hook that creates a buner address and returns a Signer\r\n * @param provider (TEthersProvider)\r\n * @returns (ethers.signer) :: signer of the wallet\r\n */\r\nexport const useBurnerSigner = (provider) => {\r\n    const key = 'metaPrivateKey';\r\n    const [signer, setSigner] = useState();\r\n    const [privateKeyValue, setPrivateKeyValue] = useState();\r\n    const setValue = (value) => {\r\n        try {\r\n            setPrivateKeyValue(value);\r\n            window.localStorage.setItem(key, value);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const storedKey = window.localStorage.getItem(key);\r\n        if (!storedKey) {\r\n            console.log('generating a new key');\r\n            const newWallet = ethers.Wallet.createRandom();\r\n            const newKey = newWallet.privateKey;\r\n            setValue(newKey);\r\n        }\r\n        else {\r\n            setValue(storedKey);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (privateKeyValue && provider) {\r\n            const wallet = new ethers.Wallet(privateKeyValue);\r\n            const newSigner = wallet.connect(provider);\r\n            setSigner(newSigner);\r\n        }\r\n    }, [privateKeyValue, provider]);\r\n    return signer;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}