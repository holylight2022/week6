{"ast":null,"code":"import { useMemo, useState } from 'react';\nimport { useBurnerSigner } from \"./\";\nimport { parseProviderOrSigner } from \"./functions/providerOrSigner\";\n\nconst syncBurnerKeyFromStorage = () => {\n  if (window.location.pathname && window.location.pathname.includes('/pk')) {\n    const incomingPK = window.location.hash.replace('#', '');\n\n    if (incomingPK.length === 64 || incomingPK.length === 66) {\n      console.log('ðŸ”‘ Incoming Private Key...');\n      const rawPK = incomingPK;\n      window.history.pushState({}, '', '/');\n      const currentPrivateKey = window.localStorage.getItem('metaPrivateKey');\n\n      if (currentPrivateKey && currentPrivateKey !== rawPK) {\n        window.localStorage.setItem(`metaPrivateKey_backup${Date.now()}`, currentPrivateKey);\n      }\n\n      window.localStorage.setItem('metaPrivateKey', rawPK);\n    }\n  }\n};\n/**\r\n *  Gets user provider/signer from injected provider or local provider\r\n *  Use your injected provider from ðŸ¦Š Metamask\r\n *  If you don't have it then instantly generate a ðŸ”¥ burner wallet from a local provider\r\n *\r\n  ~ Features ~\r\n  - Specify the injected provider from Metamask\r\n  - Specify the local provider\r\n  - Usage examples:\r\n    const tx = Transactor(userSigner, gasPrice)\r\n * @param injectedProviderOrSigner (TEthersProviderOrSigner) :: injected provider/signer from metamask etc..\r\n * @param localProvider (TEthersProvider) local provider to generate a burner wallet from\r\n * @returns (TProviderAndSigner)\r\n */\n\n\nexport const useUserProviderAndSigner = (injectedProviderOrSigner, localProvider) => {\n  const [signer, setSigner] = useState();\n  const [provider, setProvider] = useState();\n  const [providerNetwork, setProviderNetwork] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n  useMemo(() => {\n    if (injectedProviderOrSigner) {\n      console.log('ðŸ¦Š Using injected provider');\n      void parseProviderOrSigner(injectedProviderOrSigner).then(result => {\n        if (result != null) setSigner(result.signer);\n      });\n    } else if (!localProvider) {\n      setSigner(undefined);\n    } else {\n      syncBurnerKeyFromStorage();\n      console.log('ðŸ”¥ Using burner signer', burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProviderOrSigner, localProvider, burnerSigner]);\n  useMemo(() => {\n    if (signer) {\n      const result = parseProviderOrSigner(signer);\n      void result.then(r => {\n        setProvider(r.provider);\n        setProviderNetwork(r.providerNetwork);\n      });\n    }\n  }, [signer]);\n  return {\n    signer,\n    provider,\n    providerNetwork\n  };\n};","map":{"version":3,"sources":["C:/Users/Firebat/challenge-1-decentralized-staking/node_modules/eth-hooks/useUserProviderAndSigner.js"],"names":["useMemo","useState","useBurnerSigner","parseProviderOrSigner","syncBurnerKeyFromStorage","window","location","pathname","includes","incomingPK","hash","replace","length","console","log","rawPK","history","pushState","currentPrivateKey","localStorage","getItem","setItem","Date","now","useUserProviderAndSigner","injectedProviderOrSigner","localProvider","signer","setSigner","provider","setProvider","providerNetwork","setProviderNetwork","burnerSigner","then","result","undefined","r"],"mappings":"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","sourcesContent":["import { useMemo, useState } from 'react';\r\nimport { useBurnerSigner } from \"./\";\r\nimport { parseProviderOrSigner } from \"./functions/providerOrSigner\";\r\nconst syncBurnerKeyFromStorage = () => {\r\n    if (window.location.pathname && window.location.pathname.includes('/pk')) {\r\n        const incomingPK = window.location.hash.replace('#', '');\r\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\r\n            console.log('ðŸ”‘ Incoming Private Key...');\r\n            const rawPK = incomingPK;\r\n            window.history.pushState({}, '', '/');\r\n            const currentPrivateKey = window.localStorage.getItem('metaPrivateKey');\r\n            if (currentPrivateKey && currentPrivateKey !== rawPK) {\r\n                window.localStorage.setItem(`metaPrivateKey_backup${Date.now()}`, currentPrivateKey);\r\n            }\r\n            window.localStorage.setItem('metaPrivateKey', rawPK);\r\n        }\r\n    }\r\n};\r\n/**\r\n *  Gets user provider/signer from injected provider or local provider\r\n *  Use your injected provider from ðŸ¦Š Metamask\r\n *  If you don't have it then instantly generate a ðŸ”¥ burner wallet from a local provider\r\n *\r\n  ~ Features ~\r\n  - Specify the injected provider from Metamask\r\n  - Specify the local provider\r\n  - Usage examples:\r\n    const tx = Transactor(userSigner, gasPrice)\r\n * @param injectedProviderOrSigner (TEthersProviderOrSigner) :: injected provider/signer from metamask etc..\r\n * @param localProvider (TEthersProvider) local provider to generate a burner wallet from\r\n * @returns (TProviderAndSigner)\r\n */\r\nexport const useUserProviderAndSigner = (injectedProviderOrSigner, localProvider) => {\r\n    const [signer, setSigner] = useState();\r\n    const [provider, setProvider] = useState();\r\n    const [providerNetwork, setProviderNetwork] = useState();\r\n    const burnerSigner = useBurnerSigner(localProvider);\r\n    useMemo(() => {\r\n        if (injectedProviderOrSigner) {\r\n            console.log('ðŸ¦Š Using injected provider');\r\n            void parseProviderOrSigner(injectedProviderOrSigner).then((result) => {\r\n                if (result != null)\r\n                    setSigner(result.signer);\r\n            });\r\n        }\r\n        else if (!localProvider) {\r\n            setSigner(undefined);\r\n        }\r\n        else {\r\n            syncBurnerKeyFromStorage();\r\n            console.log('ðŸ”¥ Using burner signer', burnerSigner);\r\n            setSigner(burnerSigner);\r\n        }\r\n    }, [injectedProviderOrSigner, localProvider, burnerSigner]);\r\n    useMemo(() => {\r\n        if (signer) {\r\n            const result = parseProviderOrSigner(signer);\r\n            void result.then((r) => {\r\n                setProvider(r.provider);\r\n                setProviderNetwork(r.providerNetwork);\r\n            });\r\n        }\r\n    }, [signer]);\r\n    return { signer, provider, providerNetwork };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}