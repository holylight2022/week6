{"ast":null,"code":"import axios from 'axios';\nimport { useCallback, useState } from 'react';\nimport { useOnRepetition } from \"./useOnRepetition\";\n/**\r\n * Gets the gas price from Eth Gas Station\r\n * @param targetNetwork (TNetwork)\r\n * @param speed (TGasStationSpeed) 'fast', 'fastest', 'safeLow', 'average'\r\n * @param pollTime (number) :: if > 0 use polling, else use instead of onBlock event\r\n * @returns (number) gas price in gwei\r\n */\n\nexport const useGasPrice = (targetNetwork, speed, pollTime = 39999) => {\n  const multiplier = 100000000;\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = useCallback(() => {\n    if (targetNetwork === null || targetNetwork === void 0 ? void 0 : targetNetwork.gasPrice) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if (navigator.onLine) {\n        axios.get('https://ethgasstation.info/json/ethgasAPI.json').then(response => {\n          var _a;\n\n          const result = (_a = response.data) !== null && _a !== void 0 ? _a : {};\n          let newGasPrice = result[speed] * multiplier;\n          if (!newGasPrice) newGasPrice = result['fast'] * multiplier;\n\n          if (newGasPrice !== gasPrice) {\n            setGasPrice(newGasPrice);\n          }\n        }).catch(error => {\n          console.log('⚠ Could not get gas Price!', error);\n          setGasPrice(undefined);\n        });\n      }\n    }\n  }, [gasPrice, speed, targetNetwork.gasPrice]);\n  useOnRepetition(loadGasPrice, {\n    pollTime,\n    leadingTrigger: true\n  });\n  return gasPrice;\n};","map":{"version":3,"sources":["C:/Users/Firebat/challenge-1-decentralized-staking/node_modules/eth-hooks/useGasPrice.js"],"names":["axios","useCallback","useState","useOnRepetition","useGasPrice","targetNetwork","speed","pollTime","multiplier","gasPrice","setGasPrice","loadGasPrice","navigator","onLine","get","then","response","_a","result","data","newGasPrice","catch","error","console","log","undefined","leadingTrigger"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,QAAQ,GAAG,KAAlC,KAA4C;AACnE,QAAMC,UAAU,GAAG,SAAnB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,EAAxC;AACA,QAAMS,YAAY,GAAGV,WAAW,CAAC,MAAM;AACnC,QAAII,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACI,QAAhF,EAA0F;AACtFC,MAAAA,WAAW,CAACL,aAAa,CAACI,QAAf,CAAX;AACH,KAFD,MAGK;AACD,UAAIG,SAAS,CAACC,MAAd,EAAsB;AAClBb,QAAAA,KAAK,CACAc,GADL,CACS,gDADT,EAEKC,IAFL,CAEWC,QAAD,IAAc;AACpB,cAAIC,EAAJ;;AACA,gBAAMC,MAAM,GAAG,CAACD,EAAE,GAAGD,QAAQ,CAACG,IAAf,MAAyB,IAAzB,IAAiCF,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsD,EAArE;AACA,cAAIG,WAAW,GAAGF,MAAM,CAACZ,KAAD,CAAN,GAAgBE,UAAlC;AACA,cAAI,CAACY,WAAL,EACIA,WAAW,GAAGF,MAAM,CAAC,MAAD,CAAN,GAAiBV,UAA/B;;AACJ,cAAIY,WAAW,KAAKX,QAApB,EAA8B;AAC1BC,YAAAA,WAAW,CAACU,WAAD,CAAX;AACH;AACJ,SAXD,EAYKC,KAZL,CAYYC,KAAD,IAAW;AAClBC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;AACAZ,UAAAA,WAAW,CAACe,SAAD,CAAX;AACH,SAfD;AAgBH;AACJ;AACJ,GAxB+B,EAwB7B,CAAChB,QAAD,EAAWH,KAAX,EAAkBD,aAAa,CAACI,QAAhC,CAxB6B,CAAhC;AAyBAN,EAAAA,eAAe,CAACQ,YAAD,EAAe;AAAEJ,IAAAA,QAAF;AAAYmB,IAAAA,cAAc,EAAE;AAA5B,GAAf,CAAf;AACA,SAAOjB,QAAP;AACH,CA9BM","sourcesContent":["import axios from 'axios';\r\nimport { useCallback, useState } from 'react';\r\nimport { useOnRepetition } from \"./useOnRepetition\";\r\n/**\r\n * Gets the gas price from Eth Gas Station\r\n * @param targetNetwork (TNetwork)\r\n * @param speed (TGasStationSpeed) 'fast', 'fastest', 'safeLow', 'average'\r\n * @param pollTime (number) :: if > 0 use polling, else use instead of onBlock event\r\n * @returns (number) gas price in gwei\r\n */\r\nexport const useGasPrice = (targetNetwork, speed, pollTime = 39999) => {\r\n    const multiplier = 100000000;\r\n    const [gasPrice, setGasPrice] = useState();\r\n    const loadGasPrice = useCallback(() => {\r\n        if (targetNetwork === null || targetNetwork === void 0 ? void 0 : targetNetwork.gasPrice) {\r\n            setGasPrice(targetNetwork.gasPrice);\r\n        }\r\n        else {\r\n            if (navigator.onLine) {\r\n                axios\r\n                    .get('https://ethgasstation.info/json/ethgasAPI.json')\r\n                    .then((response) => {\r\n                    var _a;\r\n                    const result = (_a = response.data) !== null && _a !== void 0 ? _a : {};\r\n                    let newGasPrice = result[speed] * multiplier;\r\n                    if (!newGasPrice)\r\n                        newGasPrice = result['fast'] * multiplier;\r\n                    if (newGasPrice !== gasPrice) {\r\n                        setGasPrice(newGasPrice);\r\n                    }\r\n                })\r\n                    .catch((error) => {\r\n                    console.log('⚠ Could not get gas Price!', error);\r\n                    setGasPrice(undefined);\r\n                });\r\n            }\r\n        }\r\n    }, [gasPrice, speed, targetNetwork.gasPrice]);\r\n    useOnRepetition(loadGasPrice, { pollTime, leadingTrigger: true });\r\n    return gasPrice;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}